Subject: [PATCH] Render into wl_surface without sub surface

:Release Notes:
Render into wl_surface without sub surface in waylandsink

:Detailed Notes:
Inqemux86 environment there is wl_subcompositor and hence sub
surface is not available. As a result waylandsink is no able to
render in qemux86 environment. This patch set changes to render
into wl_surface when sub surface is not available.

This patch set is dervied from Nakyeon's first patch for
waylandsink in unified video compositor branch
Original Author: Nakyeon Choi <nakyeon.choi@lge.com>

:Testing Performed:
Used gst-launch to test these changes as below
gst-launch-1.0 videotestsrc pattern=ball ! waylandsink

:Issues Addressed:
[PLAT-76201] Fix rendering issues in waylandsink for sub surface
             in qemux86

Upstream-Status: Inappropriate
    - Only WebOS's qemux86 environment should use these changes

diff -ruN a/ext/wayland/gstwaylandsink.c b/ext/wayland/gstwaylandsink.c
--- a/ext/wayland/gstwaylandsink.c	2019-03-25 12:03:33.989756714 +0530
+++ b/ext/wayland/gstwaylandsink.c	2019-03-25 12:05:02.427927233 +0530
@@ -209,6 +209,9 @@
 {
   g_mutex_init (&sink->display_lock);
   g_mutex_init (&sink->render_lock);
+
+  sink->old_time = 0;
+  sink->frame_cnt_in_sec = 0;
 }
 
 static void
@@ -649,6 +652,15 @@
 
   GST_LOG_OBJECT (sink, "render buffer %p", buffer);
 
+  gint64 cur_time = 0;
+  sink->frame_cnt_in_sec++;
+  cur_time = g_get_monotonic_time();
+  if (GST_TIME_AS_MSECONDS(cur_time) != GST_TIME_AS_MSECONDS(sink->old_time)) {
+    GST_INFO_OBJECT (sink, "fps: %d", sink->frame_cnt_in_sec);
+    sink->frame_cnt_in_sec = 0;
+  }
+  sink->old_time = cur_time;
+
   if (G_UNLIKELY (!sink->window)) {
     /* ask for window handle. Unlock render_lock while doing that because
      * set_window_handle & friends will lock it in this context */
@@ -664,6 +676,7 @@
   }
 
   /* drop buffers until we get a frame callback */
+  sink->redraw_pending = FALSE;      // TODO:modify
   if (sink->redraw_pending) {
     GST_LOG_OBJECT (sink, "buffer %p dropped (redraw pending)", buffer);
     goto done;
diff -ruN a/ext/wayland/gstwaylandsink.h b/ext/wayland/gstwaylandsink.h
--- a/ext/wayland/gstwaylandsink.h	2019-03-25 12:03:33.989756714 +0530
+++ b/ext/wayland/gstwaylandsink.h	2019-03-25 12:05:08.532078944 +0530
@@ -66,6 +66,9 @@
   gboolean redraw_pending;
   GMutex render_lock;
   GstBuffer *last_buffer;
+
+  gint64 old_time;
+  gint frame_cnt_in_sec;
 };
 
 struct _GstWaylandSinkClass
diff -ruN a/ext/wayland/wldisplay.c b/ext/wayland/wldisplay.c
--- a/ext/wayland/wldisplay.c	2019-03-25 12:03:33.989756714 +0530
+++ b/ext/wayland/wldisplay.c	2019-03-25 12:05:14.184219624 +0530
@@ -335,7 +335,8 @@
   }
 
   VERIFY_INTERFACE_EXISTS (compositor, "wl_compositor");
-  VERIFY_INTERFACE_EXISTS (subcompositor, "wl_subcompositor");
+  if (self->subcompositor)
+    VERIFY_INTERFACE_EXISTS (subcompositor, "wl_subcompositor");
   VERIFY_INTERFACE_EXISTS (shell, "wl_shell");
   VERIFY_INTERFACE_EXISTS (shm, "wl_shm");
 
diff -ruN a/ext/wayland/wlwindow.c b/ext/wayland/wlwindow.c
--- a/ext/wayland/wlwindow.c	2019-03-25 12:03:33.989756714 +0530
+++ b/ext/wayland/wlwindow.c	2019-03-25 12:05:26.396524245 +0530
@@ -92,7 +92,8 @@
   if (self->video_viewport)
     wp_viewport_destroy (self->video_viewport);
 
-  wl_subsurface_destroy (self->video_subsurface);
+  if (self->video_subsurface)
+    wl_subsurface_destroy (self->video_subsurface);
   wl_surface_destroy (self->video_surface);
 
   if (self->area_subsurface)
@@ -126,10 +127,12 @@
       display->queue);
 
   /* embed video_surface in area_surface */
-  window->video_subsurface =
-      wl_subcompositor_get_subsurface (display->subcompositor,
-      window->video_surface, window->area_surface);
-  wl_subsurface_set_desync (window->video_subsurface);
+  if (display->subcompositor)
+    window->video_subsurface =
+        wl_subcompositor_get_subsurface (display->subcompositor,
+        window->video_surface, window->area_surface);
+  if (window->video_subsurface)
+    wl_subsurface_set_desync (window->video_subsurface);
 
   if (display->viewporter) {
     window->area_viewport = wp_viewporter_get_viewport (display->viewporter,
@@ -190,10 +193,12 @@
   window = gst_wl_window_new_internal (display, render_lock);
 
   /* embed in parent */
-  window->area_subsurface =
-      wl_subcompositor_get_subsurface (display->subcompositor,
-      window->area_surface, parent);
-  wl_subsurface_set_desync (window->area_subsurface);
+  if (display->subcompositor)
+    window->area_subsurface =
+        wl_subcompositor_get_subsurface (display->subcompositor,
+        window->area_surface, parent);
+  if (window->area_subsurface)
+    wl_subsurface_set_desync (window->area_subsurface);
 
   return window;
 }
@@ -242,11 +247,17 @@
     gst_video_sink_center_rect (src, dst, &res, FALSE);
   }
 
-  wl_subsurface_set_position (window->video_subsurface, res.x, res.y);
+  if (window->video_subsurface)
+    wl_subsurface_set_position (window->video_subsurface, res.x, res.y);
 
   if (commit) {
+    g_warning ("gst_wl_window_resize_video_surface commit & damage");
     wl_surface_damage (window->video_surface, 0, 0, res.w, res.h);
     wl_surface_commit (window->video_surface);
+  } else {
+    wl_surface_damage (window->video_surface,
+                       0, 0, window->video_width, window->video_height);
+    wl_surface_commit (window->video_surface);
   }
 
   if (gst_wl_window_is_toplevel (window)) {
@@ -294,19 +305,20 @@
         gst_util_uint64_scale_int_round (info->width, info->par_n, info->par_d);
     window->video_height = info->height;
 
-    wl_subsurface_set_sync (window->video_subsurface);
+    if (window->video_subsurface)
+      wl_subsurface_set_sync (window->video_subsurface);
     gst_wl_window_resize_video_surface (window, FALSE);
     gst_wl_window_set_opaque (window, info);
   }
 
   if (G_LIKELY (buffer))
-    gst_wl_buffer_attach (buffer, window->video_surface);
+    gst_wl_buffer_attach (buffer, window->area_surface);
   else
-    wl_surface_attach (window->video_surface, NULL, 0, 0);
+    wl_surface_attach (window->area_surface, NULL, 0, 0);
 
-  wl_surface_damage (window->video_surface, 0, 0, window->video_rectangle.w,
-      window->video_rectangle.h);
-  wl_surface_commit (window->video_surface);
+  wl_surface_damage (window->area_surface,
+                     0, 0, window->video_rectangle.w, window->video_rectangle.h);
+  wl_surface_commit (window->area_surface);
 
   if (G_UNLIKELY (info)) {
     /* commit also the parent (area_surface) in order to change
@@ -314,7 +326,8 @@
     wl_surface_damage (window->area_surface, 0, 0, window->render_rectangle.w,
         window->render_rectangle.h);
     wl_surface_commit (window->area_surface);
-    wl_subsurface_set_desync (window->video_subsurface);
+    if (window->video_subsurface)
+      wl_subsurface_set_desync (window->video_subsurface);
   }
 
   wl_display_flush (window->display->display);
@@ -358,7 +371,7 @@
   alloc = gst_wl_shm_allocator_get ();
 
   buf = gst_buffer_new_allocate (alloc, info.size, NULL);
-  gst_buffer_memset (buf, 0, 0, info.size);
+  gst_buffer_memset (buf, 0, 0x77, info.size);
   wlbuf =
       gst_wl_shm_memory_construct_wl_buffer (gst_buffer_peek_memory (buf, 0),
       window->display, &info);
@@ -393,13 +406,14 @@
   gst_wl_window_update_borders (window);
 
   if (window->video_width != 0) {
-    wl_subsurface_set_sync (window->video_subsurface);
+    if (window->video_subsurface)
+      wl_subsurface_set_sync (window->video_subsurface);
     gst_wl_window_resize_video_surface (window, TRUE);
   }
 
   wl_surface_damage (window->area_surface, 0, 0, w, h);
   wl_surface_commit (window->area_surface);
 
-  if (window->video_width != 0)
+  if (window->video_width != 0 && window->video_subsurface)
     wl_subsurface_set_desync (window->video_subsurface);
 }
