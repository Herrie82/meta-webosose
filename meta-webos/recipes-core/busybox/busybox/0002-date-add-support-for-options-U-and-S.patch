From 38f8e1d34bf4ac4403a93dd129e96879b5a8c38a Mon Sep 17 00:00:00 2001
From: Martin Jansa <martin.jansa@lge.com>
Date: Mon, 6 Nov 2017 17:24:12 +0000
Subject: [PATCH 2/3] date: add support for options -U and -S

Signed-off-by: Martin Jansa <martin.jansa@lge.com>
---
 coreutils/date.c | 28 ++++++++++++++++++++++------
 1 file changed, 22 insertions(+), 6 deletions(-)

diff --git a/coreutils/date.c b/coreutils/date.c
index 9d4a7df..dc0114a 100644
--- a/coreutils/date.c
+++ b/coreutils/date.c
@@ -99,10 +99,13 @@
 //usage:       "Display time (using +FMT), or set time\n"
 //usage:	IF_NOT_LONG_OPTS(
 //usage:     "\n	[-s] TIME	Set time to TIME"
+//usage:     "\n	-S		Get/set time as seconds since Epoc"
 //usage:     "\n	-u		Work in UTC (don't convert to local time)"
 //usage:     "\n	-R		Output RFC-2822 compliant date string"
+//usage:     "\n	-U		Only output uptime, seconds since system start"
 //usage:	) IF_LONG_OPTS(
 //usage:     "\n	[-s,--set] TIME	Set time to TIME"
+//usage:     "\n	-S,--seconds	Get/set time as seconds since Epoc"
 //usage:     "\n	-u,--utc	Work in UTC (don't convert to local time)"
 //usage:     "\n	-R,--rfc-2822	Output RFC-2822 compliant date string"
 //usage:	)
@@ -138,9 +141,7 @@
 
 #include "libbb.h"
 #include "common_bufsiz.h"
-#if ENABLE_FEATURE_DATE_NANO
-# include <sys/syscall.h>
-#endif
+#include <sys/syscall.h>
 
 enum {
 	OPT_RFC2822   = (1 << 0), /* R */
@@ -148,8 +149,10 @@ enum {
 	OPT_UTC       = (1 << 2), /* u */
 	OPT_DATE      = (1 << 3), /* d */
 	OPT_REFERENCE = (1 << 4), /* r */
-	OPT_TIMESPEC  = (1 << 5) * ENABLE_FEATURE_DATE_ISOFMT, /* I */
-	OPT_HINT      = (1 << 6) * ENABLE_FEATURE_DATE_ISOFMT, /* D */
+	OPT_SECONDS   = (1 << 5), /* S */
+        OPT_UPTIME    = (1 << 6), /* U */
+	OPT_TIMESPEC  = (1 << 7) * ENABLE_FEATURE_DATE_ISOFMT, /* I */
+	OPT_HINT      = (1 << 8) * ENABLE_FEATURE_DATE_ISOFMT, /* D */
 };
 
 static void maybe_set_utc(int opt)
@@ -187,7 +190,7 @@ int date_main(int argc UNUSED_PARAM, char **argv)
 	opt_complementary = "d--s:s--d"
 		IF_FEATURE_DATE_ISOFMT(":R--I:I--R");
 	IF_LONG_OPTS(applet_long_options = date_longopts;)
-	opt = getopt32(argv, "Rs:ud:r:"
+	opt = getopt32(argv, "Rs:ud:r:SU"
 			IF_FEATURE_DATE_ISOFMT("I::D:"),
 			&date_str, &date_str, &filename
 			IF_FEATURE_DATE_ISOFMT(, &isofmt_arg, &fmt_str2dt));
@@ -258,6 +261,14 @@ int date_main(int argc UNUSED_PARAM, char **argv)
 		 * drop a mail to project mailing list please
 		 */
 #endif
+        } else if ( opt & OPT_UPTIME) {
+                struct timespec tp;
+		if ( syscall(__NR_clock_gettime, CLOCK_MONOTONIC, &ts) ) {
+                       bb_perror_msg("cannot get date");
+                       return EXIT_FAILURE;
+                }
+                printf("%d.%02ld\n", ts.tv_sec, ts.tv_nsec / 10000000);
+                return EXIT_SUCCESS;
 	} else {
 #if ENABLE_FEATURE_DATE_NANO
 		/* libc has incredibly messy way of doing this,
@@ -280,6 +291,9 @@ int date_main(int argc UNUSED_PARAM, char **argv)
 		if (ENABLE_FEATURE_DATE_ISOFMT && (opt & OPT_HINT)) {
 			if (strptime(date_str, fmt_str2dt, &tm_time) == NULL)
 				bb_error_msg_and_die(bb_msg_invalid_date, date_str);
+                } else if ( opt & OPT_SECONDS ) {
+                       time_t seconds = atol(date_str);
+                       memcpy(&tm_time, localtime(&seconds), sizeof(tm_time));
 		} else {
 			parse_datestr(date_str, &tm_time);
 		}
@@ -322,6 +336,8 @@ int date_main(int argc UNUSED_PARAM, char **argv)
 			strcpy(fmt_dt2str, "%a, %d %b %Y %H:%M:%S ");
 			i = sizeof("%a, %d %b %Y %H:%M:%S ")-1;
 			goto format_utc;
+                } else if ( opt & OPT_SECONDS ) {
+                        fmt_dt2str = (char*)"%s";
 		} else { /* default case */
 			fmt_dt2str = (char*)"%a %b %e %H:%M:%S %Z %Y";
 		}
-- 
2.7.4

